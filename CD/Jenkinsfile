pipeline {
    agent any

    environment {
        DOCKERHUB_CREDS=credentials('sikasi')
        LC_ALL = "en_US.UTF-8"
        LANG    = "en_US.UTF-8"
        LANGUAGE = "en_US.UTF-8"
        SLEEP_TIME_IN_SECONDS1 = 420
    }

options {
        timestamps()
        skipDefaultCheckout(true)
	}
    stages {

        stage('Login'){
            steps{
                //withCredentials([usernamePassword(credentialsId: 'mle-template', passwordVariable: 'DOCKER_REGISTRY_PWD', usernameVariable: 'DOCKER_REGISTRY_USER')]){
                //bat 'chcp 65001 && echo %DOCKER_REGISTRY_PWD% | docker login -u %DOCKER_REGISTRY_USER% --password-stdin'}
                sh 'echo $DOCKERHUB_CREDS_PSW | docker login -u $DOCKERHUB_CREDS_USR --password-stdin'
//                 sh 'docker login -u %DOCKERHUB_CREDS_USR% -p %DOCKERHUB_CREDS_PSW%'
                }
            }

        stage('Pull image'){
            steps{
                sh '''
                    docker pull stpic270/bd-secl-d:latest
                    docker pull stpic270/bd-secl-cassandra:latest
                '''
            }
        }

        stage('Run container'){
            steps{
                sh """docker run --name cassandra -v big_data_second_lab_cassandra_config:/config -e HEAP_NEWSIZE=1M -e MAX_HEAP_SIZE=1024M -t -d -p 9042:9042 stpic270/bd-secl-cassandra"""
                echo "Waiting ${SLEEP_TIME_IN_SECONDS1} seconds after startingt the cassandra container"
                sleep SLEEP_TIME_IN_SECONDS1 // seconds
                sh """docker run --name model -v big_data_second_lab_cassandra_config:/app/test -t -d stpic270/bd-secl-d bash -c 'python use_cassandra.py'"""
                script{
                    try{
                        sh """
                        docker exec -t cassandra bash -c "echo '\n' >> config/cassandra_config.txt && ip -4 -o address >> config/cassandra_config.txt"
                        docker run --name model -v big_data_second_lab_cassandra_config:/app/test -t -i -p 71:70 stpic270/bd-secl-d bash -c 'python use_cassandra.py'
                        """
                    }
                    catch (err) {
                        echo "Failed: ${err}"
                    }
                    finally {
                        sh  """  
                            for i in \$(seq 1 2 20)
                            do
                                if docker logs --tail 20 -f model | grep -q 'Row(labels_name='; then
                                    echo "Data was transported to cassandra"
                                    break
                                else 
                                    docker start model
                                fi
                            done
                            """
                    }
                }
                dir("Big_data_second_lab") {
                        sh '''
                            containerId=$(docker ps -a -q -f "name=^model$")
                            echo "$containerId"
                            if ["$containerId" -eq ""]
                            then
                                echo "No container"
                            else
                                echo "There is a container"
                                docker logs --tail 20 -f $containerId
                            fi
                        '''
                }
            }
        }
	}

    post {
        always {
            sh 'docker stop cassandra && docker logout'
        }
    }
}
